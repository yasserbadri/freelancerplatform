scalar DateTime

type Query {
    freelances: [Freelance]
    freelanceById(id: ID!): Freelance
    skills: [Skill]
    liens: [LienProfessionnel]
    getProject(id: ID!): Project
    hello: String
    projectsByClient(clientId: ID!): [Project]
    availableProjects: [Project]
    proposalsByFreelance(freelanceId: ID!): [Proposal]
    freelanceReviews(freelanceId: ID!): [Review]
    freelanceAverageRating(freelanceId: ID!): Float
    projectPayments(projectId: ID!): [Payment]
    allFreelancers: [User]
    allClients: [User]
    userById(id: ID!): User
}

type Mutation {
    createFreelance(input: FreelanceInput!): Freelance
    updateFreelance(id: ID!, input: FreelanceInput!): Freelance
    deleteFreelance(id: ID!): Boolean

    createSkill(input: SkillInput): Skill
    deleteSkill(id: ID!): Boolean

    createLien(input: LienInput): LienProfessionnel
    deleteLien(id: ID!): Boolean

    createProject(input: ProjectInput!): Project
    submitProposal(input: ProposalInput!): Proposal
    acceptProposal(id: ID!): Proposal
    createReview(input: ReviewInput!): Review
    createPayment(input: PaymentInput!): Payment
    createUser(input: UserInput!): User
}

type Freelance {
    id: ID
    nom: String
    prenom: String
    email: String
    bio: String
    hourlyRate: Float
    location: String
    skills: [Skill]
    liens: [LienProfessionnel]
    proposals: [Proposal]
    reviews: [Review]
    user: User
}

type Skill {
    id: ID!
    nom: String!
}

type LienProfessionnel {
    id: ID
    type: String
    url: String
}

type Project {
    id: ID!
    name: String!
    description: String!
    budget: Float!
    status: ProjectStatus!
    startDate: DateTime!
    client: User!
    proposals: [Proposal]!
    payment: Payment
}

type User {
    id: ID!
    username: String!
    role: String!
    freelanceProfile: Freelance
    projectsPosted: [Project]
}

type Proposal {
    id: ID!
    message: String!
    bidAmount: Float!
    status: ProposalStatus!
    project: Project!
    freelance: Freelance!
}

type Review {
    id: ID!
    rating: Int!
    comment: String!
    project: Project!
    freelance: Freelance!
}

type Payment {
    id: ID!
    amount: Float!
    status: PaymentStatus!
    paymentDate: DateTime!
    project: Project!
}

input FreelanceInput {
    nom: String
    prenom: String
    email: String
    bio: String
    hourlyRate: Float
    location: String
    skills: [SkillInput!]
    liens: [LienInput!]
}

input SkillInput {
    nom: String!
}

input LienInput {
    type: String!
    url: String!
}

input ProjectInput {
    name: String!
    description: String!
    budget: Float!
    clientId: ID!
}

input ProposalInput {
    message: String!
    bidAmount: Float!
    projectId: ID!
    freelanceId: ID!
}

input ReviewInput {
    rating: Int!
    comment: String!
    projectId: ID!
    freelanceId: ID!
}

input PaymentInput {
    amount: Float!
    projectId: ID!
}

input UserInput {
    username: String!
    password: String!
    role: String!
    freelanceProfile: FreelanceInput
}

enum ProjectStatus {
    NEW
    IN_PROGRESS
    COMPLETED
}

enum ProposalStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}